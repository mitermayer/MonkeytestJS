{"name":"Monkeytestjs","tagline":"The Monkeys global acceptance tests and framework for pulling in page based tests written to work with QUnitRunner ","body":"[![Build Status](https://travis-ci.org/TheMonkeys/MonkeytestJS.png)](https://travis-ci.org/TheMonkeys/MonkeytestJS)\r\n\r\n\r\nQUnit Acceptance Tests\r\n============\r\n\r\nOpen index.html to see the current tests specification. New pages and tests can be added by editng the QUnitRunner\r\nconfig, towards the bottom of index.html.\r\n\r\nNOTE: Check the 'No try-catch' option as this is currently causing some tests to fail\r\n\r\nQUnitRunner object\r\n------------------\r\n\r\nQUnitRunner is added to the global namespace (window.QUnitRunner) as a singleton object. Kick of the runner with the\r\n following command:\r\n\r\n```javascript\r\nQUnitRunner.start (config, pagesToTest);\r\n```\r\n\r\nconfig - see QUnitRunner config below.\r\n\r\npagesToTest - an array of the urls of the pages you wish to test, or null for all\r\n\r\nQUnitRunner config\r\n-------------------\r\n\r\n```javascript\r\nvar config = {\r\n    envs:{\r\n        production : ['PRODUCTION URL OR PART OF'],\r\n        beta : ['BETA URL OR PART OF'],\r\n        stage : ['STAGE URL OR PART OF'],\r\n        dev : ['DEV URL OR PART OF']\r\n    },\r\n    testsDir:'/tests/tests/',\r\n    globalTests :[\r\n        'global/html_validate.js',\r\n        'global/has_utf8.js'\r\n    ],\r\n    pages:[\r\n        {\r\n            url:'/',\r\n            tests:['page/age_gate.js']\r\n        },\r\n        {\r\n            url:'/entryform/index?gem_id=1',\r\n            tests:[\r\n                'page/form_validation.js'\r\n            ]\r\n        }\r\n    ],\r\n    workspace:window.frames[0],\r\n    jQuery:window.jQuery\r\n};\r\n```\r\n\r\noptions.envs: Array - hash of environments, each has has an array of strings that match the url of the environment\r\n\r\noptions.testsDir: String - directory containing tests. - optional\r\n\r\noptions.workspace - this it the window or iframe the pages to be tested will be loaded into.\r\n\r\noptions.jQuery - jQuery object, primary used to to load pages via AJAX and to attached event listeners to the\r\nworkspace.\r\n\r\noptions.globalTests: Array - tests scripts to be run on every page.\r\n\r\noptions.pages: Array - pages to run the tests on, pages must contain a 'url' variable and an optional 'tests' array of\r\ntest scripts to run on this page.\r\n\r\nAdding a page to run tests against\r\n----------------------------------\r\n\r\nSimply add a page object literal to the options.pages array, the pages literal must contain a url variable.\r\n\r\n\r\nCreating a test\r\n---------------\r\n\r\nAdd the path to the test script to either the options.globalTests[] array or for a specific page to the pages[].tests[]\r\narray.\r\n\r\nCreate a test script file at the path entered above. At the most basic the test script should contain a call to the\r\nregisterTest (name, spec) function. Where the spec object literal must contain at least a load callback and an optional\r\nsetup callback. The load callback is call in the scope of a QUnitRunnerPageTest object which has numerous methods that\r\ncan be chained together to to perform test actions (see QUnitRunnerPageTest methods below). The last chain call should\r\nbe start() - this will start the test:\r\n\r\n```javascript\r\nregisterTest ('Hello world test',\r\n    {\r\n        setup:function (container) {\r\n            // this is run before the test\r\n            // use it to do things like clear cookies\r\n        }\r\n\r\n        ,load : function () {\r\n            // this is the test script\r\n            this\r\n            .test(\"Hello?\",function($) {\r\n                ok( true, \"Hello world!\");\r\n            })\r\n            .start();\r\n        }\r\n    }\r\n);\r\n```\r\n\r\nQUnitRunnerPageTest properties\r\n------------------------------\r\n\r\nAs test actions are called within the scope of QUnitRunnerPageTest you can access the objects properties by prefixing\r\nthem with this.property, eg: this.page\r\n\r\n### this.page\r\nPage spec.\r\n[TO BE COMPLETED]\r\n\r\n### this.testSpec\r\nTest spec.\r\n[TO BE COMPLETED]\r\n\r\n### this.workspace\r\nwindow or iframe containing the page - can be used to access JS objects on the page. eg:\r\nalert(this.workspace.document.title);\r\n\r\n### this.window\r\nSame as this.workspace.\r\n\r\n### this.runner\r\nQUnitRunner object.\r\n\r\n### this.$\r\nJQuery object of the page, shortcut to this.workspace.JQuery.\r\n\r\n\r\nQUnitRunnerPageTest utility methods\r\n---------------------------\r\n\r\nOut of the box QUnitRunnerPageTest comes with the following utility methods. These can be used within a test but are not chainable:\r\n\r\n\r\n### env ()\r\nReturns the current environment - based on the url of the current page.\r\n\r\n\r\n### config ()\r\nReturns the config object passed into QUnitRunner.\r\n\r\nQUnitRunnerPageTest chain/test methods\r\n---------------------------\r\n\r\nOut of the box QUnitRunnerPageTest comes with the following methods:\r\n\r\n### loadPage (url[optional])\r\nLoads a page into the iframe, also waits until page is loaded before moving to the next action in the chain. If you are\r\nperforming tests on an actual page, this will normally be the first call in a test chain.\r\n\r\n### loadPageSource ()\r\nLoads the source of a page (via AJAX) into this.page.source. Waits until the source is loaded before moving to the next\r\nchain action. If you are performing test on the page source this will normally be the first call in the test chain.\r\n\r\n### test (name, callback ($){})\r\nRuns a synchronous QUint test.\r\n\r\n### asyncTest (name, callback ($){})\r\nRuns an asynchronous QUint test. Must call this.asyncTestDone when the test is complete. Only then will the next chain\r\naction be called.\r\n\r\n### run (callback ($){})\r\nRuns arbitrary js code on the page, such as submitting a for, then moves to the next chain action.\r\n\r\n### asyncRun (callback ($){})\r\nRuns an asynchronous task. Must call this.asyncRunDone when the task is complete. Only then will the next chain\r\naction be called.\r\n\r\n### wait (duration = 1000)\r\nWaits for duration before moving to next chain task\r\n\r\n### waitForPageLoad ()\r\nPause the chain until a page load takes place. Should be used to wait if a form is submitted or a link click is\r\ntriggered. Once the page load is complete it'll move to the next chain action.\r\n\r\n\r\nCustom QUnitRunnerPageTest methods\r\n----------------------------------\r\n\r\nYou can add new QUnitRunnerPageTest methods by adding to the QUnitRunnerPageTest.prototype. eg:\r\n\r\n```javascript\r\nQUnitRunnerPageTest.prototype.alert = function (hello)\r\n{\r\n    // local reference to our QUnitRunnerPageTest object - REQUIRED\r\n    var _this = this;\r\n\r\n    // create a chain closure function - REQUIRED\r\n    var chainFn = function () {\r\n        alert(hello);\r\n\r\n        // call next to move to next chain action - REQUIRED\r\n        _this._next();\r\n    };\r\n\r\n    // add our closure to the chain - REQUIRED\r\n    this.chain.push(chainFn);\r\n\r\n    // return this to maintain chainability - REQUIRED\r\n    return this;\r\n};\r\n ```\r\n\r\nCustom methods can be chained in exactly the same way:\r\n\r\n```javascript\r\nregisterTest ('Alert test',\r\n    {\r\n        load : function () {\r\n            this\r\n            .alert(\"Hello!\")\r\n            .test(\"Alert test\",function($) {\r\n                ok( true, \"You should have seen the alert\");\r\n            })\r\n            .start();\r\n        }\r\n    }\r\n);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}